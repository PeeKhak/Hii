<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thai Fish Prawn Crab</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-image: url('https://images.unsplash.com/photo-1520769669658-794e37d98d03?auto=format&fit=crop&w=1920&q=80');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        .game-container {
            background-color: rgba(255, 245, 245, 0.9);
            border: 5px solid #ffb6c1;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 0 15px rgba(255, 182, 193, 0.5);
            max-width: 500px;
        }
        .reels {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        .reel {
            width: 100px;
            height: 100px;
            background-color: #fffafa;
            border: 2px solid #ff69b4;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 40px;
            font-weight: bold;
        }
        .betting-area {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-bottom: 20px;
        }
        .bet-option {
            padding: 10px;
            background-color: #ffe4e1;
            border: 1px solid #ff69b4;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
            font-size: 18px;
        }
        .bet-option.selected {
            background-color: #ff69b4;
            color: white;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            margin: 5px;
            cursor: pointer;
            background-color: #ff69b4;
            color: white;
            border: none;
            border-radius: 5px;
        }
        button:hover {
            background-color: #ff1493;
        }
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        #result {
            margin-top: 20px;
            font-size: 18px;
            font-weight: bold;
            color: #d81b60;
        }
        #balance {
            margin-top: 10px;
            font-size: 16px;
            color: #ad1457;
        }
        h1 {
            color: #c2185b;
            font-size: 24px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Thai Fish Prawn Crab</h1>
        <div class="reels">
            <div class="reel" id="reel1">?</div>
            <div class="reel" id="reel2">?</div>
            <div class="reel" id="reel3">?</div>
        </div>
        <div class="betting-area" id="bettingArea">
            <div class="bet-option" data-symbol="🐟">Fish</div>
            <div class="bet-option" data-symbol="🦐">Prawn</div>
            <div class="bet-option" data-symbol="🦀">Crab</div>
            <div class="bet-option" data-symbol="🍈">Gourd</div>
            <div class="bet-option" data-symbol="🐔">Chicken</div>
            <div class="bet-option" data-symbol="🐅">Tiger</div>
        </div>
        <button id="spinButton">Spin (10 Coins)</button>
        <button id="playTenButton">Play 10 Times</button>
        <div id="balance">Balance: 100 Coins</div>
        <div id="result"></div>
    </div>

    <script>
        const symbols = ['🐟', '🦐', '🦀', '🍈', '🐔', '🐅'];
        const reels = [
            document.getElementById('reel1'),
            document.getElementById('reel2'),
            document.getElementById('reel3')
        ];
        const spinButton = document.getElementById('spinButton');
        const playTenButton = document.getElementById('playTenButton');
        const bettingArea = document.getElementById('bettingArea');
        const balanceDisplay = document.getElementById('balance');
        const resultDisplay = document.getElementById('result');
        let balance = 100;
        let isSpinning = false;
        let selectedBets = [];

        // Initialize betting options
        const betOptions = bettingArea.querySelectorAll('.bet-option');
        betOptions.forEach(option => {
            option.addEventListener('click', () => {
                if (isSpinning) return;
                option.classList.toggle('selected');
                const symbol = option.getAttribute('data-symbol');
                if (option.classList.contains('selected')) {
                    if (selectedBets.length < 2) {
                        selectedBets.push(symbol);
                    } else {
                        option.classList.remove('selected');
                        resultDisplay.textContent = 'Max 2 bets allowed!';
                    }
                } else {
                    selectedBets = selectedBets.filter(bet => bet !== symbol);
                }
            });
        });

        // Create a simple sound effect
        function playSound() {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
            oscillator.connect(audioContext.destination);
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.1);
        }

        // Spin the reels
        function spin() {
            if (isSpinning) return;
            if (balance < 10) {
                resultDisplay.textContent = 'Insufficient balance!';
                return;
            }
            if (selectedBets.length === 0) {
                resultDisplay.textContent = 'Please select at least one bet!';
                return;
            }

            isSpinning = true;
            spinButton.disabled = true;
            playTenButton.disabled = true;
            balance -= 10;
            balanceDisplay.textContent = `Balance: ${balance} Coins`;
            resultDisplay.textContent = '';

            // Animate reels
            let spins = 20;
            let spinInterval = setInterval(() => {
                reels.forEach(reel => {
                    reel.textContent = symbols[Math.floor(Math.random() * symbols.length)];
                });
                spins--;
                if (spins <= 0) {
                    clearInterval(spinInterval);
                    checkWin();
                    isSpinning = false;
                    spinButton.disabled = balance < 10;
                    playTenButton.disabled = balance < 100;
                }
            }, 100);

            playSound();
        }

        // Check for winning combinations
        function checkWin() {
            const result = reels.map(reel => reel.textContent);
            let message = '';
            let winnings = 0;

            if (selectedBets.length === 1) {
                const bet = selectedBets[0];
                const matches = result.filter(symbol => symbol === bet).length;
                if (matches === 1) {
                    winnings = 10; // 1:1 payout
                    message = `You won ${winnings} coins! (1 match)`;
                } else if (matches === 2) {
                    winnings = 20; // 2:1 payout
                    message = `You won ${winnings} coins! (2 matches)`;
                } else if (matches === 3) {
                    winnings = 30; // 3:1 payout
                    message = `Jackpot! You won ${winnings} coins! (3 matches)`;
                } else {
                    message = 'No matches, try again!';
                }
            } else if (selectedBets.length === 2) {
                const bothPresent = selectedBets.every(bet => result.includes(bet));
                if (bothPresent) {
                    winnings = 50; // 5:1 payout for combo bet
                    message = `Combo win! You won ${winnings} coins!`;
                } else {
                    message = 'No combo match, try again!';
                }
            }

            balance += winnings;
            balanceDisplay.textContent = `Balance: ${balance} Coins`;
            resultDisplay.textContent = message;
        }

        // Play 10 times automatically
        async function playTenTimes() {
            if (balance < 100) {
                resultDisplay.textContent = 'Need at least 100 coins to play 10 times!';
                return;
            }
            if (selectedBets.length === 0) {
                resultDisplay.textContent = 'Please select at least one bet!';
                return;
            }

            for (let i = 0; i < 10; i++) {
                if (balance < 10) {
                    resultDisplay.textContent = 'Stopped: Insufficient balance!';
                    break;
                }
                spin();
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }

        // Event listeners
        spinButton.addEventListener('click', spin);
        playTenButton.addEventListener('click', playTenTimes);

        // Initial button state
        playTenButton.disabled = balance < 100;
    </script>
</body>
</html>
